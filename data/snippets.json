[
  {
      "snippet": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
      "language": "Python"
  },
  {
      "snippet": "public class LinkedList {\n    Node head;\n    class Node {\n        int data;\n        Node next;\n        Node(int d) {\n            data = d;\n        }\n    }\n    public void insert(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n}",
      "language": "Java"
  },
  {
      "snippet": "class Queue {\nprivate:\n    int* arr;\n    int front, rear, size, capacity;\npublic:\n    Queue(int cap) : front(0), rear(-1), size(0), capacity(cap) {\n        arr = new int[capacity];\n    }\n    ~Queue() {\n        delete[] arr;\n    }\n    void enqueue(int x) {\n        if (size < capacity) {\n            arr[++rear] = x;\n            size++;\n        }\n    }\n    int dequeue() {\n        if (size > 0) {\n            int x = arr[front++];\n            size--;\n            return x;\n        }\n        return -1;\n    }\n};",
      "language": "C++"
  },
  {
      "snippet": "const throttle = (func, delay) => {\n    let lastCall = 0;\n    return (...args) => {\n        const now = new Date().getTime();\n        if (now - lastCall >= delay) {\n            lastCall = now;\n            return func(...args);\n        }\n    };\n};\nconst log = throttle((msg) => console.log(msg), 1000);\nlog('Hello');\nlog('World');",
      "language": "JavaScript"
  },
  {
      "snippet": "defmodule BinarySearch do\n  def search(list, target) do\n    do_search(list, target, 0, length(list) - 1)\n  end\n\n  defp do_search(_, _, low, high) when low > high, do: -1\n  defp do_search(list, target, low, high) do\n    mid = div(low + high, 2)\n    case Enum.at(list, mid) do\n      ^target -> mid\n      val when val > target -> do_search(list, target, low, mid - 1)\n      _ -> do_search(list, target, mid + 1, high)\n    end\n  end\nend",
      "language": "Elixir"
  },
  {
      "snippet": "fn sieve_of_eratosthenes(n: i32) -> Vec<i32> {\n    let mut primes = vec![true; (n + 1) as usize];\n    primes[0] = false;\n    primes[1] = false;\n    for i in 2..=((n as f64).sqrt() as i32) {\n        if primes[i as usize] {\n            for j in (i * i..=n).step_by(i as usize) {\n                primes[j as usize] = false;\n            }\n        }\n    }\n    (2..=n).filter(|&x| primes[x as usize]).collect()\n}",
      "language": "Rust"
  },
  {
      "snippet": "stats <- function(x) {\n  n <- length(x)\n  mean <- sum(x) / n\n  variance <- sum((x - mean)^2) / (n - 1)\n  sd <- sqrt(variance)\n  return(list(mean = mean, variance = variance, sd = sd))\n}\nmy_data <- c(1, 2, 3, 4, 5)\nresult <- stats(my_data)",
      "language": "R"
  },
  {
      "snippet": "class HashTable {\nprivate:\n    static const int SIZE = 10;\n    std::vector<std::list<std::pair<int, std::string>>> table;\npublic:\n    HashTable() : table(SIZE) {}\n    int hash(int key) { return key % SIZE; }\n    void insert(int key, std::string value) {\n        int index = hash(key);\n        for (auto& pair : table[index]) {\n            if (pair.first == key) {\n                pair.second = value;\n                return;\n            }\n        }\n        table[index].emplace_back(key, value);\n    }\n};",
      "language": "C++"
  },
  {
      "snippet": "func bubbleSort(_ arr: inout [Int]) {\n    let n = arr.count\n    for i in 0..<n {\n        for j in 0..<n - i - 1 {\n            if arr[j] > arr[j + 1] {\n                arr.swapAt(j, j + 1)\n            }\n        }\n    }\n}\nvar numbers = [64, 34, 25, 12, 22]\nbubbleSort(&numbers)",
      "language": "Swift"
  },
  {
      "snippet": "fun dijkstra(graph: Map<Int, Map<Int, Int>>, start: Int): Map<Int, Int> {\n    val distances = mutableMapOf(start to 0)\n    val pq = PriorityQueue<Pair<Int, Int>> { a, b -> a.second - b.second }\n    pq.add(start to 0)\n    while (pq.isNotEmpty()) {\n        val (node, dist) = pq.poll()\n        if (distances.getOrDefault(node, Int.MAX_VALUE) < dist) continue\n        graph[node]?.forEach { (neighbor, weight) ->\n            val newDist = dist + weight\n            if (newDist < distances.getOrDefault(neighbor, Int.MAX_VALUE)) {\n                distances[neighbor] = newDist\n                pq.add(neighbor to newDist)\n            }\n        }\n    }\n    return distances\n}",
      "language": "Kotlin"
  },
  {
      "snippet": "fn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").unwrap();\n    println!(\"Server running on 127.0.0.1:8080\");\n    for stream in listener.incoming() {\n        match stream {\n            Ok(mut s) => {\n                let mut buffer = [0; 1024];\n                s.read(&mut buffer).unwrap();\n                s.write(b\"HTTP/1.1 200 OK\\r\\n\\r\\nHello!\").unwrap();\n            }\n            Err(e) => println!(\"Error: {}\", e),\n        }\n    }\n}",
      "language": "Rust"
  },
  {
      "snippet": "def palindrome_permutation(s):\n    odds = set()\n    for char in s.lower():\n        if char.isalnum():\n            if char in odds:\n                odds.remove(char)\n            else:\n                odds.add(char)\n    return len(odds) <= 1",
      "language": "Python"
  },
  {
      "snippet": "type 'a bst = Leaf | Node of 'a * 'a bst * 'a bst\nlet rec insert x = function\n  | Leaf -> Node (x, Leaf, Leaf)\n  | Node (v, left, right) ->\n      if x < v then Node (v, insert x left, right)\n      else if x > v then Node (v, left, insert x right)\n      else Node (v, left, right)",
      "language": "OCaml"
  },
  {
      "snippet": "object Logger {\n  private val logFile = File(\"app.log\")\n  fun log(message: String) {\n    val timestamp = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Date())\n    val entry = \"$timestamp - $message\\n\"\n    logFile.appendText(entry)\n  }\n  fun readLogs(): List<String> {\n    return logFile.readLines()\n  }\n}",
      "language": "Kotlin"
  },
  {
      "snippet": "function validateForm($data) {\n    $errors = [];\n    if (empty($data['name']) || strlen($data['name']) < 3) {\n        $errors[] = 'Name must be at least 3 characters';\n    }\n    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        $errors[] = 'Invalid email format';\n    }\n    if (empty($data['password']) || strlen($data['password']) < 8) {\n        $errors[] = 'Password must be at least 8 characters';\n    }\n    return $errors;\n}",
      "language": "PHP"
  },
  {
      "snippet": "main = do\n    putStrLn \"Enter a number:\"\n    input <- getLine\n    let n = read input :: Int\n    let fibs = 0 : 1 : zipWith (+) fibs (tail fibs)\n    putStrLn $ \"Fibonacci sequence up to \" ++ show n ++ \":\"\n    print $ take n fibs",
      "language": "Haskell"
  },
  {
      "snippet": "func reverseList(head *ListNode) *ListNode {\n    var prev *ListNode\n    curr := head\n    for curr != nil {\n        next := curr.Next\n        curr.Next = prev\n        prev = curr\n        curr = next\n    }\n    return prev\n}",
      "language": "Go"
  },
  {
      "snippet": "let rec quicksort = function\n  | [] -> []\n  | pivot :: rest ->\n      let left, right = List.partition ((>) pivot) rest in\n      quicksort left @ [pivot] @ quicksort right\nlet sorted = quicksort [5; 2; 9; 1; 5; 6]",
      "language": "OCaml"
  },
  {
      "snippet": "class Trie {\npublic:\n    struct Node {\n        unordered_map<char, Node*> children;\n        bool isEnd = false;\n    };\n    Node* root;\n    Trie() { root = new Node(); }\n    void insert(string word) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new Node();\n            }\n            node = node->children[c];\n        }\n        node->isEnd = true;\n    }\n};",
      "language": "C++"
  },
  {
      "snippet": "def topological_sort(graph):\n    def dfs(node, visited, stack):\n        visited.add(node)\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                dfs(neighbor, visited, stack)\n        stack.append(node)\n    visited = set()\n    stack = []\n    for node in graph:\n        if node not in visited:\n            dfs(node, visited, stack)\n    return stack[::-1]",
      "language": "Python"
  },
  {
      "snippet": "def matrix_multiply(a, b):\n    n, m, p = len(a), len(a[0]), len(b[0])\n    result = [[0 for _ in range(p)] for _ in range(n)]\n    for i in range(n):\n        for j in range(p):\n            for k in range(m):\n                result[i][j] += a[i][k] * b[k][j]\n    return result",
      "language": "Python"
  },
  {
      "snippet": "public class CircularBuffer {\n    private int[] buffer;\n    private int head, tail, size, capacity;\n    public CircularBuffer(int cap) {\n        buffer = new int[cap];\n        capacity = cap;\n        head = tail = size = 0;\n    }\n    public void add(int value) {\n        if (size == capacity) {\n            head = (head + 1) % capacity;\n        } else {\n            size++;\n        }\n        buffer[tail] = value;\n        tail = (tail + 1) % capacity;\n    }\n}",
      "language": "Java"
  },
  {
      "snippet": "class DisjointSet {\nprivate:\n    vector<int> parent, rank;\npublic:\n    DisjointSet(int n) : parent(n), rank(n, 0) {\n        for (int i = 0; i < n; i++) parent[i] = i;\n    }\n    int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n    void unite(int x, int y) {\n        int px = find(x), py = find(y);\n        if (px == py) return;\n        if (rank[px] < rank[py]) swap(px, py);\n        parent[py] = px;\n        if (rank[px] == rank[py]) rank[px]++;\n    }\n};",
      "language": "C++"
  },
  {
      "snippet": "const debounce = (func, wait) => {\n    let timeout;\n    return (...args) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func(...args), wait);\n    };\n};\nconst saveInput = debounce((val) => console.log('Saved:', val), 500);\nsaveInput('test');",
      "language": "JavaScript"
  },
  {
      "snippet": "defmodule RateLimiter do\n  defstruct [:limit, :count, :reset_time]\n  def new(limit, window) do\n    %RateLimiter{limit: limit, count: 0, reset_time: now() + window}\n  end\n  def allow?(limiter) do\n    current = now()\n    if current > limiter.reset_time do\n      {%RateLimiter{limit: limiter.limit, count: 1, reset_time: current + (limiter.reset_time - limiter.count)}, true}\n    else\n      if limiter.count < limiter.limit do\n        {%RateLimiter{limiter | count: limiter.count + 1}, true}\n      else\n        {limiter, false}\n      end\n    end\n  end\n  defp now, do: System.system_time(:millisecond)\nend",
      "language": "Elixir"
  },
  {
      "snippet": "fn lru_cache(capacity: usize) -> HashMap<i32, i32> {\n    let mut cache = HashMap::with_capacity(capacity);\n    let mut order = VecDeque::with_capacity(capacity);\n    return |key: i32, value: i32| {\n        if cache.len() >= capacity && !cache.contains_key(&key) {\n            if let Some(oldest) = order.pop_front() {\n                cache.remove(&oldest);\n            }\n        }\n        cache.insert(key, value);\n        order.push_back(key);\n        value\n    };\n}",
      "language": "Rust"
  },
  {
      "snippet": "plot_histogram <- function(data, bins) {\n  hist_data <- hist(data, breaks = bins, plot = FALSE)\n  plot(hist_data, main = 'Histogram', xlab = 'Value', ylab = 'Frequency', col = 'skyblue')\n  abline(v = mean(data), col = 'red', lwd = 2)\n  abline(v = median(data), col = 'green', lwd = 2)\n  legend('topright', c('Mean', 'Median'), col = c('red', 'green'), lwd = 2)\n}",
      "language": "R"
  },
  {
      "snippet": "class MinHeap {\nprivate:\n    vector<int> heap;\n    void heapifyUp(int index) {\n        while (index > 0) {\n            int parent = (index - 1) / 2;\n            if (heap[parent] <= heap[index]) break;\n            swap(heap[parent], heap[index]);\n            index = parent;\n        }\n    }\npublic:\n    void insert(int val) {\n        heap.push_back(val);\n        heapifyUp(heap.size() - 1);\n    }\n};",
      "language": "C++"
  },
  {
      "snippet": "func gcd(a: Int, b: Int) -> Int {\n    var x = a\n    var y = b\n    while y != 0 {\n        let temp = y\n        y = x % y\n        x = temp\n    }\n    return abs(x)\n}\nlet result = gcd(48, 18)",
      "language": "Swift"
  },
  {
      "snippet": "fun lcs(str1: String, str2: String): String {\n    val dp = Array(str1.length + 1) { IntArray(str2.length + 1) }\n    for (i in 1..str1.length) {\n        for (j in 1..str2.length) {\n            if (str1[i - 1] == str2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            } else {\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            }\n        }\n    }\n    return reconstructLCS(str1, str2, dp)\n}",
      "language": "Kotlin"
  },
  {
      "snippet": "func main() {\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        data, _ := json.Marshal(map[string]string{\"message\": \"Hello, World!\"})\n        w.Header().Set(\"Content-Type\", \"application/json\")\n        w.Write(data)\n    })\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}",
      "language": "Go"
  },
  {
      "snippet": "def huffman_codes(freq):\n    heap = [[weight, [char, '']] for char, weight in freq.items()]\n    heapq.heapify(heap)\n    while len(heap) > 1:\n        lo = heapq.heappop(heap)\n        hi = heapq.heappop(heap)\n        for pair in lo[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in hi[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])\n    return dict(heap[0][1:])",
      "language": "Python"
  },
  {
      "snippet": "type 'a circular_list = { mutable head: 'a option; mutable tail: 'a option }\nlet create () = { head = None; tail = None }\nlet append cl x =\n  match cl.head with\n  | None -> cl.head <- Some x; cl.tail <- Some x\n  | Some h -> cl.tail <- Some x; cl.head <- Some h",
      "language": "OCaml"
  },
  {
      "snippet": "object BloomFilter {\n  private val bits = BitSet(1000000)\n  private val hashes = listOf({ x: Int -> x.hashCode() }, { x: Int -> x * 31 + 17 })\n  fun add(value: Any) {\n    hashes.forEach { bits.set(it(value).absoluteValue % bits.size()) }\n  }\n  fun mightContain(value: Any): Boolean {\n    return hashes.all { bits.get(it(value).absoluteValue % bits.size()) }\n  }\n}",
      "language": "Kotlin"
  },
  {
      "snippet": "function binaryTreeToArray($root) {\n    $result = [];\n    $queue = [$root];\n    while (!empty($queue)) {\n        $node = array_shift($queue);\n        if ($node) {\n            $result[] = $node->value;\n            array_push($queue, $node->left, $node->right);\n        } else {\n            $result[] = null;\n        }\n    }\n    return array_filter($result, fn($val) => $val !== null);\n}",
      "language": "PHP"
  },
  {
      "snippet": "main :: IO ()\nmain = do\n    contents <- readFile \"input.txt\"\n    let words = length . filter (not . null) . splitOn \" \" $ contents\n    putStrLn $ \"Word count: \" ++ show words\n    writeFile \"output.txt\" (show words)",
      "language": "Haskell"
  },
  {
      "snippet": "func maxSubArray(nums []int) int {\n    maxSoFar := nums[0]\n    maxEndingHere := nums[0]\n    for i := 1; i < len(nums); i++ {\n        maxEndingHere = max(nums[i], maxEndingHere+nums[i])\n        maxSoFar = max(maxSoFar, maxEndingHere)\n    }\n    return maxSoFar\n}",
      "language": "Go"
  },
  {
      "snippet": "let rec avl_insert x t =\n  match t with\n  | Leaf -> Node (x, Leaf, Leaf, 1)\n  | Node (v, l, r, h) ->\n      if x < v then balance (Node (v, avl_insert x l, r, h + 1))\n      else if x > v then balance (Node (v, l, avl_insert x r, h + 1))\n      else t",
      "language": "OCaml"
  },
  {
      "snippet": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n    void build(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\npublic:\n    SegmentTree(const vector<int>& arr) : n(arr.size()) {\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n};",
      "language": "C++"
  },
  {
      "snippet": "def knapsack(values, weights, capacity):\n    n = len(values)\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(capacity + 1):\n            if weights[i - 1] <= w:\n                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])\n            else:\n                dp[i][w] = dp[i - 1][w]\n    return dp[n][capacity]",
      "language": "Python"
  },
  {
      "snippet": "fn levenshtein(s1: &str, s2: &str) -> usize {\n    let mut dp = vec![vec![0; s2.len() + 1]; s1.len() + 1];\n    for i in 0..=s1.len() {\n        dp[i][0] = i;\n    }\n    for j in 0..=s2.len() {\n        dp[0][j] = j;\n    }\n    for (i, c1) in s1.chars().enumerate() {\n        for (j, c2) in s2.chars().enumerate() {\n            dp[i + 1][j + 1] = if c1 == c2 { dp[i][j] } else { 1 + dp[i][j].min(dp[i + 1][j].min(dp[i][j + 1])) };\n        }\n    }\n    dp[s1.len()][s2.len()]\n}",
      "language": "Rust"
  },
  {
      "snippet": "histogram <- function(x, breaks) {\n  counts <- table(cut(x, breaks = breaks))\n  mids <- as.numeric(sub('.*,(.*)]', '\\\\1', names(counts))) - diff(breaks)[1] / 2\n  barplot(counts, names.arg = mids, xlab = 'Value', ylab = 'Count', col = 'lightgreen')\n  lines(density(x), col = 'blue', lwd = 2)\n  rug(x, col = 'gray')\n}",
      "language": "R"
  },
  {
      "snippet": "func binarySearch(_ arr: [Int], _ target: Int) -> Int {\n    var left = 0\n    var right = arr.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if arr[mid] == target {\n            return mid\n        } else if arr[mid] < target {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}",
      "language": "Swift"
  },
  {
      "snippet": "function compressString($str) {\n    $compressed = '';\n    $count = 1;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($i + 1 < strlen($str) && $str[$i] === $str[$i + 1]) {\n            $count++;\n        } else {\n            $compressed .= $str[$i] . ($count > 1 ? $count : '');\n            $count = 1;\n        }\n    }\n    return $compressed;\n}",
      "language": "PHP"
  },
  {
      "snippet": "main = do\n    putStrLn \"Enter numbers separated by spaces:\"\n    line <- getLine\n    let nums = map read (words line) :: [Int]\n    let sorted = foldl (\\acc x -> insert x acc) [] nums\n    putStrLn $ \"Sorted: \" ++ show sorted\n    where insert x [] = [x]\n          insert x (y:ys) = if x <= y then x:y:ys else y:insert x ys",
      "language": "Haskell"
  },
  {
      "snippet": "def convex_hull(points):\n    points = sorted(points)\n    if len(points) <= 1:\n        return points\n    lower = []\n    for p in points:\n        while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0:\n            lower.pop()\n        lower.append(p)\n    upper = []\n    for p in reversed(points):\n        while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0:\n            upper.pop()\n        upper.append(p)\n    return lower[:-1] + upper[:-1]",
      "language": "Python"
  },
  {
      "snippet": "defmodule LRUCache do\n  defstruct [:capacity, :map, :list]\n  def new(capacity) do\n    %LRUCache{capacity: capacity, map: %{}, list: []}\n  end\n  def put(cache, key, value) do\n    new_list = [key | Enum.filter(cache.list, &(&1 != key))]\n    new_map = Map.put(cache.map, key, value)\n    if length(new_list) > cache.capacity do\n      {_, trimmed_list} = List.pop_at(new_list, -1)\n      {_, trimmed_map} = Map.pop(new_map, List.last(new_list))\n      %LRUCache{cache | map: trimmed_map, list: trimmed_list}\n    else\n      %LRUCache{cache | map: new_map, list: new_list}\n    end\n  end\nend",
      "language": "Elixir"
  },
  {
      "snippet": "public class RedBlackTree {\n    private Node root;\n    private class Node {\n        int key;\n        boolean red;\n        Node left, right;\n        Node(int k) { key = k; red = true; }\n    }\n    public void insert(int key) {\n        root = insertRec(root, key);\n        root.red = false;\n    }\n    private Node insertRec(Node node, int key) {\n        if (node == null) return new Node(key);\n        if (key < node.key) node.left = insertRec(node.left, key);\n        else if (key > node.key) node.right = insertRec(node.right, key);\n        return balance(node);\n    }\n}",
      "language": "Java"
  },
  {
      "snippet": "const kmpSearch = (text, pattern) => {\n    const lps = computeLPS(pattern);\n    let i = 0, j = 0;\n    while (i < text.length) {\n        if (pattern[j] === text[i]) {\n            i++;\n            j++;\n        }\n        if (j === pattern.length) {\n            return i - j;\n        } else if (i < text.length && pattern[j] !== text[i]) {\n            if (j !== 0) j = lps[j - 1];\n            else i++;\n        }\n    }\n    return -1;\n};",
      "language": "JavaScript"
  },
  {
      "snippet": "type 'a skip_list =\n  | Nil\n  | Node of 'a * 'a skip_list array\nlet insert x sl =\n  let rec find_levels level lst =\n    match lst with\n    | Nil -> Array.make (level + 1) Nil\n    | Node (v, next) when x <= v -> Array.make (level + 1) Nil\n    | Node (v, next) ->\n        let sub = find_levels (level - 1) next.(level)\n        sub.(level) <- lst; sub\n  in\n  let levels = find_levels (Random.int 4) sl in\n  Node (x, levels)",
      "language": "OCaml"
  },
  {
    "snippet": "int binary_search(int arr[], int size, int target) {\n    int left = 0, right = size - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}",
    "language": "C"
  },
  {
      "snippet": "public class Calculator {\n    public int Add(int a, int b) {\n        return a + b;\n    }\n    public int Subtract(int a, int b) {\n        return a - b;\n    }\n    public static void Main(string[] args) {\n        Calculator calc = new Calculator();\n        Console.WriteLine(calc.Add(5, 3));\n    }\n}",
      "language": "C#"
  },
  {
      "snippet": "interface User {\n    id: number;\n    name: string;\n}\nfunction greet(user: User): string {\n    return `Hello, ${user.name} (ID: ${user.id})`;\n}\nconst user: User = { id: 1, name: 'Alice' };\nconsole.log(greet(user));",
      "language": "TypeScript"
  },
  {
      "snippet": "class Point {\n  final double x, y;\n  Point(this.x, this.y);\n  double distanceTo(Point other) {\n    var dx = x - other.x;\n    var dy = y - other.y;\n    return sqrt(dx * dx + dy * dy);\n  }\n}",
      "language": "Dart"
  },
  {
      "snippet": "object MathUtils {\n  def factorial(n: Int): BigInt = {\n    if (n <= 1) 1\n    else n * factorial(n - 1)\n  }\n  def main(args: Array[String]): Unit = {\n    println(factorial(5))\n  }\n}",
      "language": "Scala"
  },
  {
      "snippet": "function stack()\n    local s = {}\n    s.push = function(x) table.insert(s, x) end\n    s.pop = function() return table.remove(s) end\n    s.peek = function() return s[#s] end\n    return s\nend\nlocal st = stack()\nst.push(5)",
      "language": "Lua"
  },
  {
      "snippet": "sub rotate_array {\n    my ($arr, $k) = @_;\n    $k %= @$arr;\n    return [ @$arr[$k..$#$arr], @$arr[0..$k-1] ];\n}\nmy @nums = (1, 2, 3, 4, 5);\nmy $rotated = rotate_array(\\@nums, 2);\nprint join(', ', @$rotated), \"\\n\";",
      "language": "Perl"
  },
  {
      "snippet": "class Counter\n  def initialize\n    @count = 0\n  end\n  def increment\n    @count += 1\n  end\n  def value\n    @count\n  end\nend\ncounter = Counter.new\ncounter.increment",
      "language": "Ruby"
  },
  {
      "snippet": "class Timer {\n    def start() {\n        startTime = System.currentTimeMillis()\n    }\n    def elapsed() {\n        System.currentTimeMillis() - startTime\n    }\n}\ntimer = new Timer()\ntimer.start()",
      "language": "Groovy"
  },
  {
      "snippet": "with Ada.Text_IO; use Ada.Text_IO;\nprocedure Greet is\nbegin\n    Put_Line(\"Hello, World!\");\n    for I in 1 .. 5 loop\n        Put_Line(\"Count: \" & Integer'Image(I));\n    end loop;\nend Greet;",
      "language": "Ada"
  },
  {
      "snippet": "SUBROUTINE reverse_array(arr, n)\n    INTEGER, INTENT(IN) :: n\n    INTEGER, INTENT(INOUT) :: arr(n)\n    INTEGER :: i, temp\n    DO i = 1, n/2\n        temp = arr(i)\n        arr(i) = arr(n - i + 1)\n        arr(n - i + 1) = temp\n    END DO\nEND SUBROUTINE",
      "language": "Fortran"
  },
  {
      "snippet": "program SwapNumbers;\nvar\n  a, b, temp: Integer;\nbegin\n  a := 5;\n  b := 10;\n  temp := a;\n  a := b;\n  b := temp;\n  writeln('a = ', a, ', b = ', b);\nend.",
      "language": "Pascal"
  },
  {
      "snippet": "@interface Stack : NSObject\n@property NSMutableArray *items;\n- (void)push:(id)item;\n- (id)pop;\n@end\n@implementation Stack\n- (id)init {\n    self = [super init];\n    self.items = [NSMutableArray array];\n    return self;\n}\n- (void)push:(id)item {\n    [self.items addObject:item];\n}\n@end",
      "language": "Objective-C"
  },
  {
      "snippet": "function y = polynomial(x, coeffs)\n    y = 0;\n    for i = 1:length(coeffs)\n        y = y + coeffs(i) * x^(i-1);\n    end\nend\nx = 2;\ncoeffs = [1, 2, 3];\nresult = polynomial(x, coeffs);",
      "language": "MATLAB"
  },
  {
      "snippet": "-module(counter).\n-export([start/0, increment/1, get/1]).\nstart() -> spawn(fun() -> loop(0) end).\nloop(N) ->\n    receive\n        {increment} -> loop(N + 1);\n        {get, Pid} -> Pid ! N, loop(N)\n    end.\nincrement(Pid) -> Pid ! {increment}.\nget(Pid) -> Pid ! {get, self()}, receive N -> N end.",
      "language": "Erlang"
  },
  {
      "snippet": "(ns example.core)\n(defn sum-squares [n]\n  (reduce + (map #(* % %) (range 1 (inc n)))))\n(defn -main []\n  (println \"Sum of squares up to 5:\" (sum-squares 5))\n  (flush))",
      "language": "Clojure"
  },
  {
      "snippet": "let rec factorial n =\n    if n <= 1 then 1\n    else n * factorial (n - 1)\nlet main () =\n    printfn \"Factorial of 5: %d\" (factorial 5)\n    0\nlet _ = main ()",
      "language": "F#"
  },
  {
      "snippet": "(define (gcd a b)\n  (if (= b 0)\n      a\n      (gcd b (remainder a b))))\n(define (main)\n  (display (gcd 48 18))\n  (newline))\n(main)",
      "language": "Scheme"
  },
  {
      "snippet": "fn sum_array(arr: []int) int {\n    mut sum := 0\n    for i in 0 .. arr.len {\n        sum += arr[i]\n    }\n    return sum\n}\narr := [1, 2, 3, 4]\nprintln(sum_array(arr))",
      "language": "V"
  },
  {
      "snippet": "int[] merge(int[] a, int[] b) {\n    int[] result = new int[a.length + b.length];\n    int i = 0, j = 0, k = 0;\n    while (i < a.length && j < b.length) {\n        result[k++] = a[i] < b[j] ? a[i++] : b[j++];\n    }\n    while (i < a.length) result[k++] = a[i++];\n    while (j < b.length) result[k++] = b[j++];\n    return result;\n}",
      "language": "D"
  },
  {
      "snippet": "def palindrome?(str : String) : Bool\n  cleaned = str.downcase.gsub(/[^a-z0-9]/, \"\")\n  left, right = 0, cleaned.size - 1\n  while left < right\n    return false if cleaned[left] != cleaned[right]\n    left += 1\n    right -= 1\n  end\n  true\nend",
      "language": "Crystal"
  },
  {
      "snippet": "function is_prime(n)\n    if n < 2\n        return false\n    end\n    for i = 2:sqrt(n)\n        if n % i == 0\n            return false\n        end\n    end\n    return true\nend\nprintln(is_prime(17))",
      "language": "Julia"
  },
  {
      "snippet": "proc reverseString(s: string): string =\n  result = newString(s.len)\n  for i in 0..<s.len:\n    result[s.len - 1 - i] = s[i]\n  return result\nlet str = \"Hello\"\necho reverseString(str)",
      "language": "Nim"
  },
  {
      "snippet": "fn flood_fill(img: []u8, x: i32, y: i32, new_color: u8) void {\n    const old_color = img[x * width + y];\n    if (old_color == new_color) return;\n    img[x * width + y] = new_color;\n    if (x > 0) flood_fill(img, x - 1, y, new_color);\n    if (x < height - 1) flood_fill(img, x + 1, y, new_color);\n    if (y > 0) flood_fill(img, x, y - 1, new_color);\n}",
      "language": "Zig"
  },
  {
      "snippet": "(define (count-leaves tree)\n  (cond ((null? tree) 0)\n        ((not (pair? tree)) 1)\n        (else (+ (count-leaves (car tree))\n                 (count-leaves (cdr tree)))))\n(define t '(1 (2 3) 4))\n(printf \"Leaves: ~a\\n\" (count-leaves t))",
      "language": "Racket"
  },
  {
      "snippet": "update : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        Increment -> { model | count = model.count + 1 }\n        Decrement -> { model | count = model.count - 1 }\n        Reset -> { model | count = 0 }\ntype Msg = Increment | Decrement | Reset",
      "language": "Elm"
  },
  {
      "snippet": "IDENTIFICATION DIVISION.\nPROGRAM-ID. HelloWorld.\nPROCEDURE DIVISION.\n    DISPLAY 'Hello, World!'.\n    PERFORM 3 TIMES\n        DISPLAY 'Counting...'\n    END-PERFORM.\n    STOP RUN.",
      "language": "COBOL"
  },
  {
      "snippet": "parent(X, Y) :- father(X, Y).\nparent(X, Y) :- mother(X, Y).\ngrandparent(X, Z) :- parent(X, Y), parent(Y, Z).\nfather(john, mary).\nmother(jane, mary).\n?- grandparent(X, mary).",
      "language": "Prolog"
  },
  {
      "snippet": "Object subclass: Stack [\n    | items |\n    <init> [^self init]\n    init [items := OrderedCollection new]\n    push: item [items add: item]\n    pop [^items removeLast]\n]\n| s |\ns := Stack new.\ns push: 5.",
      "language": "Smalltalk"
  },
  {
      "snippet": "(defun reverse-list (lst)\n  (if (null lst)\n      nil\n      (append (reverse-list (cdr lst)) (list (car lst)))))\n(defun main ()\n  (format t \"Reversed: ~a~%\" (reverse-list '(1 2 3 4 5))))\n(main)",
      "language": "Lisp"
  },
  {
    "snippet": "count_words() {\n    echo \"Enter text:\"\n    read text\n    echo $text | wc -w\n    if [ $? -eq 0 ]; then\n        echo \"Success\"\n    else\n        echo \"Error\"\n    fi\n}",
    "language": "Bash"
  },
  {
      "snippet": "function Get-Factorial {\n    param ([int]$n)\n    if ($n -le 1) { return 1 }\n    $result = 1\n    for ($i = 2; $i -le $n; $i++) {\n        $result *= $i\n    }\n    return $result\n}\nWrite-Host (Get-Factorial 5)",
      "language": "PowerShell"
  },
  {
      "snippet": "section .data\n    msg db 'Hello', 0\nsection .text\n    global _start\n_start:\n    mov rax, 1\n    mov rdi, 1\n    mov rsi, msg\n    mov rdx, 5\n    syscall\n    mov rax, 60\n    xor rdi, rdi\n    syscall",
      "language": "Assembly"
  },
  {
      "snippet": "proc reverse {str} {\n    set len [string length $str]\n    set result \"\"\n    for {set i [expr {$len - 1}]} {$i >= 0} {incr i -1} {\n        append result [string index $str $i]\n    }\n    return $result\n}\nputs [reverse \"Hello\"]",
      "language": "Tcl"
  },
  {
      "snippet": "class Vector2D {\n    public var x:Float;\n    public var y:Float;\n    public function new(x:Float, y:Float) {\n        this.x = x;\n        this.y = y;\n    }\n    public function magnitude():Float {\n        return Math.sqrt(x * x + y * y);\n    }\n}\nvar v = new Vector2D(3, 4);",
      "language": "Haxe"
  },
  {
      "snippet": ": reverse ( str -- reversed )\n    dup strlen 0 ?do\n        dup i + c@\n        swap 1- swap\n    loop drop ;\n\"Hello\" reverse type",
      "language": "Forth"
  },
  {
      "snippet": "∇Z←reverse V\n    Z←⌽V\n    :If 0=≢V\n        Z←'Empty'\n    :Else\n        Z←⌽V\n    :EndIf\n∇\nV←'Hello'\nreverse V",
      "language": "APL"
  },
  {
      "snippet": "REPORT zhello.\nSTART-OF-SELECTION.\n    DATA: lv_count TYPE i VALUE 0.\n    DO 5 TIMES.\n        lv_count = lv_count + 1.\n        WRITE: / 'Count:', lv_count.\n    ENDDO.",
      "language": "ABAP"
  },
  {
      "snippet": "class Button {\n    var label:String;\n    function new(label:String) {\n        this.label = label;\n    }\n    function click():Void {\n        trace(\"Clicked: \" + label);\n    }\n}\nvar btn = new Button(\"Submit\");",
      "language": "ActionScript"
  },
  {
      "snippet": "BEGIN\n    INT i;\n    FOR i := 1 TO 5 DO\n        PRINT i;\n    OD;\n    EXIT;\nEND",
      "language": "ALGOL 68"
  },
  {
      "snippet": "public class OpportunityController {\n    public static void updateStatus(String oppId) {\n        Opportunity opp = [SELECT Id, StageName FROM Opportunity WHERE Id = :oppId];\n        opp.StageName = 'Closed Won';\n        update opp;\n    }\n}",
      "language": "Apex"
  },
  {
      "snippet": "BEGIN { sum = 0 }\n$1 > 0 { sum += $1 }\nEND {\n    print \"Sum of positive numbers:\", sum\n    if (sum > 100) print \"Large sum!\"\n}",
      "language": "Awk"
  },
  {
      "snippet": "import ballerina/io;\npublic function main() {\n    int[] numbers = [1, 2, 3, 4, 5];\n    int sum = 0;\n    foreach int n in numbers {\n        sum += n;\n    }\n    io:println(\"Sum: \", sum);\n}",
      "language": "Ballerina"
  },
  {
      "snippet": "int btoi(char *s) {\n    int n = 0;\n    while (*s) {\n        n = n * 10 + (*s++ - '0');\n    }\n    return n;\n}\nmain() {\n    printf(\"%d\\n\", btoi(\"123\"));\n}",
      "language": "BCPL"
  },
  {
      "snippet": "<cfscript>\nfunction greet(name) {\n    var message = \"Hello, \" & name & \"!\";\n    writeOutput(message);\n    return message;\n}\ngreet(\"World\");\n</cfscript>",
      "language": "ColdFusion"
  },
  {
      "snippet": "program HelloWorld;\nuses SysUtils;\ntype\n  TCounter = class\n    private FCount: Integer;\n    public\n      procedure Increment;\n      property Count: Integer read FCount;\n  end;\nprocedure TCounter.Increment;\nbegin\n  Inc(FCount);\nend;\nbegin\n  Writeln('Hello');\nend.",
      "language": "Delphi"
  },
  {
      "snippet": "class Stack\n    private items: ARRAY OF INTEGER\n    private top: INTEGER\n    feature\n        make(n: INTEGER)\n            do\n                create items.make(0, n-1)\n                top := -1\n            end\n        push(x: INTEGER)\n            do\n                top := top + 1\n                items[top] := x\n            end\nend",
      "language": "Eiffel"
  },
  {
      "snippet": "USING: io sequences ;\nIN: example\n: double-each ( seq -- new-seq )\n    [ 2 * ] map ;\n{ 1 2 3 4 } double-each\n[ . ] each",
      "language": "Factor"
  },
  {
      "snippet": "> import falcon.array\narray\n  var arr = [1, 2, 3]\n  function sum()\n    var total = 0\n    for i in arr\n      total += i\n    return total\n  end\nprint arr.sum()",
      "language": "Falcon"
  },
  {
      "snippet": "<?hh\nfunction reverse_string(string $s): string {\n    $len = strlen($s);\n    $result = '';\n    for ($i = $len - 1; $i >= 0; $i--) {\n        $result .= $s[$i];\n    }\n    return $result;\n}\necho reverse_string('Hello');",
      "language": "Hack"
  },
  {
      "snippet": "procedure reverse(string s; value result)\n    integer i;\n    result := \"\";\n    for i := length(s) downto 1 do\n        result := result || s[i];\n    endfor;\nend;\nstring r;\nreverse(\"Hello\", r);\nprint r;",
      "language": "Icon"
  },
  {
      "snippet": "Stack := Object clone\nStack items := List clone\nStack push := method(item,\n    items append(item)\n    self)\nStack pop := method(\n    items pop)\ns := Stack clone\ns push(5)",
      "language": "Io"
  },
  {
      "snippet": "+/ i. 5\nNB. Sum of numbers 0 to 4\nfactorial =: 3 : '!y'\nNB. Factorial function\necho factorial 5\nNB. Prints 120",
      "language": "J"
  },
  {
      "snippet": "//SYSIN DD *\n//STEP1 EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD *\nHello, World!\n/*\n//SYSUT2 DD SYSOUT=*\n//SYSIN DD DUMMY",
      "language": "JCL"
  },
  {
      "snippet": "function reverse(str) {\n    var result = \"\";\n    for (var i = str.length - 1; i >= 0; i--) {\n        result += str.charAt(i);\n    }\n    return result;\n}\nWScript.Echo(reverse(\"Hello\"));",
      "language": "JScript"
  },
  {
      "snippet": "function data_logger()\n    daq = daqcreate('nidaq');\n    addchannel(daq, 0);\n    set(daq, 'SampleRate', 1000);\n    start(daq);\n    data = getdata(daq, 1000);\n    plot(data);\nend",
      "language": "LabVIEW"
  },
  {
      "snippet": "|-- START\n|   X := 0\n|---| X < 5 |---|\n|   | X := X + 1 |\n|   | OUTPUT X   |\n|--- END",
      "language": "Ladder Logic"
  },
  {
      "snippet": "to spiral :size\n  if :size > 100 [stop]\n  fd :size\n  rt 90\n  spiral :size + 5\nend\nspiral 10",
      "language": "Logo"
  },
  {
      "snippet": "MODULE Reverse;\nVAR s: ARRAY 256 OF CHAR;\nPROCEDURE ReverseString(VAR str: ARRAY OF CHAR);\n    VAR i, j: INTEGER; temp: CHAR;\n    BEGIN\n        i := 0; j := LENGTH(str) - 1;\n        WHILE i < j DO\n            temp := str[i]; str[i] := str[j]; str[j] := temp;\n            INC(i); DEC(j)\n        END\n    END ReverseString;\nBEGIN\n    s := \"Hello\";\n    ReverseString(s)\nEND Reverse;",
      "language": "Modula-2"
  },
  {
      "snippet": "int MqlRates rates[];\nint OnInit() {\n    ArraySetAsSeries(rates, true);\n    int copied = CopyRates(_Symbol, PERIOD_CURRENT, 0, 10, rates);\n    if (copied > 0) Print(\"Copied \", copied, \" rates\");\n    return(INIT_SUCCEEDED);\n}",
      "language": "MQL4"
  },
  {
      "snippet": "MODULE Hello;\n    FROM InOut IMPORT WriteString, WriteLn;\n    VAR i: INTEGER;\nBEGIN\n    FOR i := 1 TO 5 DO\n        WriteString(\"Hello, World!\");\n        WriteLn\n    END\nEND Hello.",
      "language": "Oberon"
  },
  {
      "snippet": "__kernel void vector_add(__global const float *a,\n                         __global const float *b,\n                         __global float *result,\n                         const int n) {\n    int i = get_global_id(0);\n    if (i < n) {\n        result[i] = a[i] + b[i];\n    }\n}",
      "language": "OpenCL"
  },
  {
      "snippet": "/printHello {\n    /Helvetica findfont\n    12 scalefont setfont\n    100 100 moveto\n    (Hello, World!) show\n    showpage\n} def\nprintHello",
      "language": "PostScript"
  },
  {
      "snippet": "module ReverseString exposing (reverse)\nreverse : String -> String\nreverse str =\n    String.fromList (List.reverse (String.toList str))\nmain =\n    Html.text (reverse \"Hello\")",
      "language": "PureScript"
  },
  {
      "snippet": "CLS\nINPUT \"Enter a number: \", n\nFOR i = 1 TO n\n    PRINT i;\nNEXT i\nPRINT\nEND",
      "language": "QBasic"
  },
  {
      "snippet": "sub reverse-string($str) {\n    my $reversed = '';\n    for $str.comb -> $char {\n        $reversed = $char ~ $reversed;\n    }\n    return $reversed;\n}\nsay reverse-string('Hello');",
      "language": "Raku"
  },
  {
      "snippet": "let double = x => {\n  let result = x * 2;\n  result\n};\nlet main = () => {\n  Console.log(double(5));\n};\nmain();",
      "language": "Reason"
  },
  {
      "snippet": "parse arg str\nresult = ''\ndo i = length(str) to 1 by -1\n    result = result || substr(str, i, 1)\nend\nsay result\nexit",
      "language": "Rexx"
  },
  {
      "snippet": "data numbers;\n    do i = 1 to 5;\n        x = i * 2;\n        output;\n    end;\nrun;\nproc print data=numbers;\nrun;",
      "language": "SAS"
  },
  {
      "snippet": "class Counter\n    integer value\n    Counter() value := 0\n    method increment\n        value := value + 1\n    method getValue result integer\n        result := value\nend\nc := Counter new\nc increment",
      "language": "Simula"
  },
  {
      "snippet": "contract Counter {\n    uint public count;\n    constructor() {\n        count = 0;\n    }\n    function increment() public {\n        count += 1;\n    }\n    function getCount() public view returns (uint) {\n        return count;\n    }\n}",
      "language": "Solidity"
  },
  {
      "snippet": "CREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    age INT\n);\nINSERT INTO users (id, name, age)\nVALUES (1, 'Alice', 25);\nSELECT * FROM users\nWHERE age > 20;",
      "language": "SQL"
  },
  {
      "snippet": "class Stack\n    var items[]\n    function push(item)\n        items.append(item)\n    end\n    function pop()\n        if items.len() > 0\n            return items.pop()\n        end\n        return null\n    end\nend\ns := Stack()\ns.push(5)",
      "language": "Squirrel"
  },
  {
      "snippet": "fun rev(s:string):string =\n    let val chars = explode s\n    in implode(rev chars)\n    end\nval r = rev \"Hello\"\nval _ = print(r ^ \"\\n\")",
      "language": "Standard ML"
  },
  {
      "snippet": "program Counter\n    var n : integer\n    n := 0\n    repeat\n        n := n + 1\n        put n\n    until n = 5\nend",
      "language": "Turing"
  },
  {
      "snippet": "class TPoint\nprivate\n    x, y: Integer\npublic\n    constructor Create(aX, aY: Integer)\n    begin\n        x := aX\n        y := aY\n    end\n    function GetX: Integer\n    begin\n        Result := x\n    end\nend",
      "language": "Vala"
  },
  {
      "snippet": "module counter(input clk, output reg [3:0] count);\n    initial count = 0;\n    always @(posedge clk) begin\n        if (count < 15)\n            count <= count + 1;\n        else\n            count <= 0;\n    end\nendmodule",
      "language": "Verilog"
  },
  {
      "snippet": "entity adder is\n    port(a, b: in bit; sum, carry: out bit);\nend adder;\narchitecture behavioral of adder is\nbegin\n    sum <= a xor b;\n    carry <= a and b;\nend behavioral;",
      "language": "VHDL"
  },
  {
      "snippet": "Sub ReverseString(ByVal s As String)\n    Dim result As String\n    result = \"\"\n    For i = Len(s) To 1 Step -1\n        result = result & Mid(s, i, 1)\n    Next i\n    MsgBox result\nEnd Sub\nReverseString \"Hello\"",
      "language": "Visual Basic"
  },
  {
      "snippet": "(module\n  (func $add (param $a i32) (param $b i32) (result i32)\n    local.get $a\n    local.get $b\n    i32.add)\n  (export \"add\" (func $add)))",
      "language": "WebAssembly"
  },
  {
      "snippet": "ReverseString[s_] := Module[{chars},\n    chars = Characters[s];\n    StringJoin[Reverse[chars]]\n];\nPrint[ReverseString[\"Hello\"]];\nQuit[]",
      "language": "Wolfram"
  },
  {
      "snippet": "class StringUtils {\n    def static reverse(String s) {\n        val builder = new StringBuilder\n        for (i in s.length - 1..0) {\n            builder.append(s.charAt(i))\n        }\n        builder.toString\n    }\n}\nprintln(StringUtils.reverse(\"Hello\"))",
      "language": "Xtend"
  },
  {
      "snippet": "class Stack\n    var items: [int]\n    fn push(x: int):\n        items.append(x)\n    fn pop() -> int:\n        if items.len() > 0:\n            return items.pop()\n        return -1\ns := Stack()\ns.push(5)",
      "language": "Lobster"
  },
  {
      "snippet": "Fixpoint factorial (n : nat) : nat :=\n  match n with\n  | 0 => 1\n  | S n' => n * factorial n'\n  end.\nCompute (factorial 5).",
      "language": "Agda"
  },
  {
      "snippet": "Definition double (n : nat) : nat :=\n  n + n.\nFixpoint sum_to (n : nat) : nat :=\n  match n with\n  | 0 => 0\n  | S n' => n + sum_to n'\n  end.\nCompute (sum_to 5).",
      "language": "Rocq"
  },
  {
      "snippet": "method SumArray(a: array<int>) returns (s: int)\n    ensures s == Sum(a, 0, a.Length)\n{\n    s := 0;\n    for i := 0 to a.Length\n        invariant s == Sum(a, 0, i)\n    {\n        s := s + a[i];\n    }\n}",
      "language": "Dafny"
  },
  {
      "snippet": "/*@ requires \\valid(a + (0..n-1));\n    ensures \\result == \\sum(0, n-1, \\lambda integer i; a[i]); */\nint array_sum(int* a, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++)\n        /*@ invariant sum == \\sum(0, i-1, \\lambda integer j; a[j]); */\n    {\n        sum += a[i];\n    }\n    return sum;\n}",
      "language": "Frama-C"
  },
  {
      "snippet": "Module Module1\n    Class Counter\n        Private count As Integer\n        Public Sub New()\n            count = 0\n        End Sub\n        Public Sub Increment()\n            count += 1\n        End Sub\n        Public Function GetCount() As Integer\n            Return count\n        End Function\n    End Class\nEnd Module",
      "language": "Gambas"
  },
  {
      "snippet": "def double : nat -> nat :=\n  fun n => n + n.\nLemma double_correct : forall n, double n = n + n.\nProof.\n  intros n; unfold double; reflexivity.\nQed.\nCompute (double 5).",
      "language": "Lean"
  },
  {
      "snippet": "restart:\nx := n -> sum(i, i=0..n):\nseq(x(i), i=0..5):\nplot(x, 0..5, title=\"Sum Sequence\"):\nsum_series := x(5):",
      "language": "Maple"
  },
  {
      "snippet": "fn reverse_array(arr: []i32) []i32 {\n    mut result := []i32{len: arr.len}\n    for i := 0; i < arr.len; i++ {\n        result[arr.len - 1 - i] = arr[i]\n    }\n    return result\n}\narr := [1, 2, 3]\nreverse_array(arr)",
      "language": "Odin"
  },
  {
      "snippet": "let sum_array (a:array int) : int\n    requires { a <> null }\n    ensures { result = Array.sum a 0 (Array.length a) } =\n  let s = ref 0 in\n  for i = 0 to Array.length a - 1 do\n    s := !s + a[i]\n  done;\n  !s",
      "language": "WhyML"
  }
]